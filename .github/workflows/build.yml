name: Build

on:
  push:
    branches:
      - main
    paths:
      - src/*.cs
      - src/Amaurot.csproj
      - src/package.nix
      - src/deps.json
      - src/Dockerfile
      - default.nix
      - lon.nix
      - lon.lock
      - .github/workflows/build.yml
  workflow_dispatch:

jobs:
  build:
    runs-on:
      - self-hosted
      - Linux
      - X64

    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - uses: actions/checkout@v5

      - name: Install Lix
        uses: samueldr/lix-gha-installer-action@v2025-02-26.prerelease

      - name: Install Cachix
        uses: cachix/cachix-action@v16
        with:
          name: drakon64
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build
        run: cachix watch-exec drakon64 -- nix-build -A docker

      - name: Create Cachix pins
        run: |
          cachix pin drakon64 amaurot "$(nix eval --expr '(import ./. {})' --raw --impure)" --keep-revisions 1
          cachix pin drakon64 amaurot-docker "$(nix eval --expr '(import ./. {}).docker {}' --raw --impure)" --keep-revisions 1

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman

      - run: podman load < result

      - name: Login to GitHub Packages
        run: echo $GITHUB_TOKEN | podman login ghcr.io -u ${{ github.actor }} --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to GitHub Packages
        run: |
          podman build -t ghcr.io/drakon64/amaurot:latest --timestamp 0 .
          podman push ghcr.io/drakon64/amaurot:latest
        working-directory: src

#      - name: Build Nix shell
#        run: nix-shell -A opentofu --run "exit"

#      - uses: google-github-actions/auth@v3
#        with:
#          project_id: ${{ secrets.GCP_PROJECT }}
#          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}

#      - name: Deploy to Cloud Run
#        run: |
#          echo "$TERRAFORM_TFVARS" | base64 -d > terraform.tfvars
#          nix-shell -A opentofu ../shell.nix --run "tofu init"
#          nix-shell -A opentofu ../shell.nix --run "tofu apply -auto-approve -target module.amaurot.google_cloud_run_v2_service.processor -target module.amaurot.google_cloud_run_v2_service.receiver"
#        working-directory: tofu
#        env:
#          TERRAFORM_TFVARS: ${{ secrets.TERRAFORM_TFVARS }}
